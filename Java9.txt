Java 9 New Features:
---------------------
1) Java Shell (REPL--> Repetative evaluation process loop)
2) Private Method in interfaces
3) Factory methods for Collections
4) Try with Resources Enhancements
5) Enhancements to Java 8 Stream API
6) The Java Platform Module System(JPMS)
7) Diamond Operator
8) SafeVarargs Annotation
		--> Heap Pollution Problem
9) Process API Updates
10) HTTP/2 Client
11) G1 Garbage Collector.

Josh long
98Modules
1. JShell
2. JPMS
3. Process API Updates
4. private methods inside interfaces
	--> Reusability without effecting implementation classes
without effecting 
interface Interf{
	m1();
	m2();
}		



--> Changes in String class	

--> Collections improvement
Link: https://dzone.com/articles/java-9-collections-improvements?oid=facebook&utm_content=bufferf4d97&utm_medium=social&utm_source=facebook.com&utm_campaign=buffer

Java 9 has created factory methods for creating immutable Lists, Sets, Maps, and Map.Entry Objects. These utility methods are used to create empty or non-empty collection objects.
In Java 8 and earlier versions, we can use Collections class utility methods like unmodifiableXXX to create Immutable Collection objects for our requirements. If we want to create an Immutable List, then we can use the Collections.unmodifiableList method.

These useful methods are used to create a new Non-Empty Immutable Map with 1-10 elements. 
The methods are designed in such a case that we can add only 10 elements to immutable 
--> List, 
--> Set, 
--> Map, 
--> Map.Entry objects.

Characteristics of These Utility Methods
1) These methods are immutable.
		--> We cannot add or delete or update the elements in the collection. 
			If we try to add or delete or update the elements, it throws an 
					unsupportedOperationException
					
					List<String> list = List.of("apple", "orange");
2) It doesn't allow null values. If we try to add null values to any collection, then it throws a null pointer exception.
3) They are serializable if all the elements are serializable.

With Values:
	List<String> list= List.of("apple","bat");
	Set<String> set= Set.of("apple","bat");
	Map<Integer,String> map = Map.of(1, "Apple", 2, "Bat", 3, "Cat");
	Map.Entry<Integer,String> mapEntry1 = Map.entry(1,"Apple")
	Map.Entry<Integer,String> mapEntry2 = Map.entry(2,"Bat")
	Map.Entry<Integer,String> mapEntry3 = Map.entry(3,"Cat")
	Map<Integer,String> mapEntry = Map.ofEntries(mapEntry1,mapEntry2,mapEntry3)

Empty List:
	List<String> list= List.of();
	Set<String> set= Set.of();
	Map<Integer,String> emptyMap = Map.of();
	Map<Integer,String> emptyEntry = Map.ofEntries()
	
	https://www.youtube.com/watch?v=WTVooKLLVT8
	https://www.youtube.com/watch?v=J2fgb8nWUo8
	https://www.youtube.com/watch?v=WK2Hf0L_DM8&list=PLY5Qd3Qe0mw9udD-hPLPFUpZxhwrpfwhW&index=2
	

https://dzone.com/articles/transferring-inputstream-to-outputstream-in-jdk-9?oid=facebook&utm_content=bufferc7422&utm_medium=social&utm_source=facebook.com&utm_campaign=buffer	
http://www.yegor256.com/2017/10/03/java9.html

Factory Methods for creating Unmodifiable Collections:
------------------------------------------------------
--> If we try to add elements to Unmodifiable collection we get below error:
		--> Unsupported OperationException
--> 

In List - 12 methods
   Set  - 12 methods
   Map  - 11 methods
List:
List list = List.of()
List.of(1,2);

Set:
Set set = Set.of()
Set.of(1,2);

Map:
Map map = Map.of()
Map.ofEntries(..) varargs

--> If we try to add Null as values we get below error:
		--> NullPointerException 
--> In case of Set if duplicate object is added or In case of Map duplicate Key is added we get below error:
		--> IllegalArgumentException

Stream API Enhancements:
--------------------------
In total 4 new methods added..
1) takeWhile() --> Default Method
		--> same as filter method
		always going to perform boolean operation
		takeWhile(Predicate<>)
		once boolean fails . it fails ther itself it will not process further
	Example: 
		[6,2,1,4,9]
		here after 2 it stops and ignores rest 
		output: 6, 2
		
2) dropWhile() --> Default Method
3) Stram.iterate() --> Static Method
		--> iterate method with 3 argurment
4) Stream.ofNullable() --> Static Method

JLink (Java Linker):
---------------------
To create our own customized very small JRE's. 


HttpURLConnection:
--------------------
HttpURLConnection java1.1 which supports Http1.1 protocol only  doest supprt Http2.0

Http1.1 
--> supports only text won't support binary data
--> at a time only one request we can send , performance impact
--> works only in blocking mode( synchronous mode )
--> difficult to use 


HTTpP2Client

Apache HTTPClient

Incubator module 
	--> jdk.incubator.httpclient package

Incubator --> premature
HTTPClient
HTTPRequest
HTTPResponse


Java 9:
--> Boolean(boolean trueORFalse)
constructor is deprecated
--> Finalizers have been deprecated, The Java 9 replacement for finalizers is cleaners. Cleaners are less dangerous than finalizers, but still unpredictable, slow, and generally unnecessary.